const { TableClient, AzureNamedKeyCredential } = require('@azure/data-tables');

// Configuraci√≥n de Azure Storage
const accountName = "teampulsestorage";
const accountKey = "b8qCxiVoDnoY8Ebp6Z2Sg88nM2IOlC/xmm54AkpQtBamwMdNAb/NGTUauDvBiQf4yMbXc/qNiyzQ+AStt26HoA==";
const tableName = "Templates";

// SCRIPT DE EMERGENCIA - NO BORRA NADA, SOLO ARREGLA
async function emergencyFix() {
    try {
        const credential = new AzureNamedKeyCredential(accountName, accountKey);
        const tableClient = new TableClient(
            `https://${accountName}.table.core.windows.net`,
            tableName,
            credential
        );

        console.log('üö® MODO EMERGENCIA - Arreglando registros corruptos SIN BORRAR');
        
        // Primero, veamos qu√© hay en la tabla
        console.log('\nüîç Verificando estado actual de la tabla...');
        const entities = tableClient.listEntities();
        let totalCount = 0;
        let corruptedCount = 0;
        let goodCount = 0;
        
        for await (const entity of entities) {
            totalCount++;
            try {
                JSON.parse(entity.preguntas);
                console.log(`‚úÖ ${entity.rowKey} - JSON v√°lido`);
                goodCount++;
            } catch (e) {
                console.log(`‚ùå ${entity.rowKey} - JSON corrupto: ${entity.preguntas.substring(0, 50)}...`);
                corruptedCount++;
            }
        }
        
        console.log(`\nüìä Estado actual:`);
        console.log(`   Total: ${totalCount}`);
        console.log(`   Buenos: ${goodCount}`);
        console.log(`   Corruptos: ${corruptedCount}`);
        
        if (corruptedCount === 0) {
            console.log('\n‚ú® ¬°No hay registros corruptos! La tabla est√° bien.');
            return;
        }
        
        console.log(`\nüîß Arreglando ${corruptedCount} registros corruptos...`);
        
        // Solo datos de prueba - UN TEMPLATE SIMPLE PARA VERIFICAR
        const testTemplate = {
            partitionKey: "TEMPLATE",
            rowKey: "test_template_v1",
            nombre: "Test Template",
            categoria: "Test",
            descripcion: "Template de prueba",
            objetivo: "Verificar que el JSON funciona",
            preguntas: "[{\"pregunta\":\"¬øFunciona este test?\",\"opciones\":[\"S√≠\",\"No\"]}]", // STRING YA ESCAPADO
            creador: "TeamPulse System",
            esPublico: true,
            fechaCreacion: new Date().toISOString(),
            vecesUsado: 0,
            tags: "test",
            nivelPlan: "free"
        };
        
        console.log('\nüß™ Insertando template de prueba...');
        try {
            // Usar upsert para no fallar si ya existe
            await tableClient.upsertEntity(testTemplate, "Replace");
            console.log('‚úÖ Template de prueba insertado');
            
            // Verificar inmediatamente
            const verification = await tableClient.getEntity("TEMPLATE", "test_template_v1");
            const parsed = JSON.parse(verification.preguntas);
            console.log(`üîç Verificaci√≥n exitosa: ${parsed.length} pregunta(s) parseada(s)`);
            console.log(`üìù JSON guardado: ${verification.preguntas}`);
            
        } catch (error) {
            console.error('‚ùå Error en template de prueba:', error.message);
            return;
        }
        
        console.log('\n‚úÖ EL FORMATO FUNCIONA! Ahora puedes ejecutar el script completo.');
        console.log('\nüìã SIGUIENTE PASO:');
        console.log('1. Si tu app ahora puede leer el "test_template_v1", el formato es correcto');
        console.log('2. Luego ejecuta el script completo para arreglar todos los dem√°s');
        
    } catch (error) {
        console.error('‚ùå Error en script de emergencia:', error.message);
    }
}

// SCRIPT COMPLETO - Solo ejecutar si el test funciona
async function fixAllTemplates() {
    // Templates con JSON YA ESCAPADO COMO STRING
    const templatesWithCorrectFormat = [
        {
            partitionKey: "TEMPLATE",
            rowKey: "clima_laboral_basico_v1",
            nombre: "Clima Laboral B√°sico",
            categoria: "HR",
            descripcion: "Eval√∫a el ambiente de trabajo y satisfacci√≥n del equipo",
            objetivo: "Medir la satisfacci√≥n general y el clima organizacional",
            preguntas: "[{\"pregunta\":\"¬øC√≥mo calificar√≠as el ambiente de trabajo en general?\",\"opciones\":[\"Excelente\",\"Bueno\",\"Regular\",\"Malo\"]},{\"pregunta\":\"¬øTe sientes valorado/a en tu rol actual?\",\"opciones\":[\"Siempre\",\"Frecuentemente\",\"A veces\",\"Nunca\"]},{\"pregunta\":\"¬øC√≥mo es la comunicaci√≥n con tu equipo?\",\"opciones\":[\"Muy efectiva\",\"Efectiva\",\"Puede mejorar\",\"Deficiente\"]},{\"pregunta\":\"¬øRecomendar√≠as esta empresa como lugar de trabajo?\",\"opciones\":[\"Definitivamente s√≠\",\"Probablemente s√≠\",\"No estoy seguro/a\",\"No\"]}]",
            creador: "TeamPulse System",
            esPublico: true,
            fechaCreacion: new Date().toISOString(),
            vecesUsado: 0,
            tags: "clima,ambiente,satisfacci√≥n,hr,b√°sico",
            nivelPlan: "free"
        },
        {
            partitionKey: "TEMPLATE",
            rowKey: "nps_cliente_v1",
            nombre: "NPS Cliente",
            categoria: "Customer",
            descripcion: "Mide la lealtad y satisfacci√≥n del cliente (Net Promoter Score)",
            objetivo: "Evaluar la probabilidad de recomendaci√≥n y satisfacci√≥n del cliente",
            preguntas: "[{\"pregunta\":\"¬øQu√© tan probable es que recomiendes nuestro servicio? (0-10)\",\"opciones\":[\"9-10 (Promotor)\",\"7-8 (Neutral)\",\"0-6 (Detractor)\"]},{\"pregunta\":\"¬øC√≥mo calificar√≠as tu experiencia general?\",\"opciones\":[\"Excelente\",\"Buena\",\"Regular\",\"Mala\"]},{\"pregunta\":\"¬øQu√© aspecto valoras m√°s de nuestro servicio?\",\"opciones\":[\"Calidad\",\"Precio\",\"Atenci√≥n al cliente\",\"Rapidez\"]}]",
            creador: "TeamPulse System",
            esPublico: true,
            fechaCreacion: new Date().toISOString(),
            vecesUsado: 0,
            tags: "nps,cliente,satisfacci√≥n,customer,lealtad",
            nivelPlan: "free"
        }
        // Agregar m√°s templates aqu√≠ una vez que confirmes que funciona...
    ];
    
    try {
        const credential = new AzureNamedKeyCredential(accountName, accountKey);
        const tableClient = new TableClient(
            `https://${accountName}.table.core.windows.net`,
            tableName,
            credential
        );
        
        console.log('üîß ARREGLANDO TODOS LOS TEMPLATES...');
        
        for (const template of templatesWithCorrectFormat) {
            try {
                await tableClient.upsertEntity(template, "Replace");
                
                // Verificar
                const verification = await tableClient.getEntity(template.partitionKey, template.rowKey);
                JSON.parse(verification.preguntas); // Esto debe funcionar
                
                console.log(`‚úÖ ${template.rowKey} - Arreglado y verificado`);
            } catch (error) {
                console.error(`‚ùå ${template.rowKey} - Error:`, error.message);
            }
        }
        
        console.log('\nüéâ Templates principales arreglados!');
        
    } catch (error) {
        console.error('‚ùå Error arreglando templates:', error.message);
    }
}

// Permitir ejecutar solo el test o todo
const args = process.argv.slice(2);
if (args.includes('--fix-all')) {
    fixAllTemplates();
} else {
    emergencyFix();
}